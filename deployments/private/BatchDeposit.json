{
  "address": "0x2e379794ba98387c55e67f0fe2ee955451971446",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "DEPOSIT_CONTRACT_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "withdrawal_credentials",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "deposit_data_roots",
          "type": "bytes32[]"
        }
      ],
      "name": "batchDeposit",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DEPOSIT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogSendDepositLeftover",
      "type": "event"
    }
  ],
  "transactionHash": "0x513d354e64b14a2bb3ba2d0ecb167c8a1c2ba7c3deeec4a0afaa062633af6c59",
  "receipt": {
    "to": null,
    "from": "0xc9445a0b56e55bf893592a38fcc25e334e6ef744",
    "contractAddress": "0x2e379794ba98387c55e67f0fe2ee955451971446",
    "transactionIndex": "0x0",
    "gasUsed": "0xae27d",
    "logsBloom": "0x
    "blockHash": "0x1f5390e5f44791779a6216aa5ab9d575af37b71746808661650032d7a7b45d1a",
    "transactionHash": "0x513d354e64b14a2bb3ba2d0ecb167c8a1c2ba7c3deeec4a0afaa062633af6c59",
    "logs": [],
    "blockNumber": "0x3b05",
    "cumulativeGasUsed": "0xae27d",
    "status": "0x1"
  },
  "args": [],
  "solcInputHash": "24e75b8b8cec242a82dfacbe3a4c9094",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSendDepositLeftover\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"The batch size has an upper bound due to the block gas limit. Each atomic          deposit costs ~62,000 gas. The current block gas-limit is ~12,400,000 gas.  /// Author:  Staked Securely, Inc. (https://staked.us/)\",\"methods\":{\"batchDeposit(bytes[],bytes[],bytes[],bytes32[])\":{\"params\":{\"deposit_data_roots\":\"- An array of the SHA-256 hash of the SSZ-encoded DepositData object.\",\"pubkeys\":\"- An array of BLS12-381 public keys.\",\"signatures\":\"- An array of BLS12-381 signatures.\",\"withdrawal_credentials\":\"- An array of commitment to public key for withdrawals.\"}}}},\"userdoc\":{\"methods\":{\"batchDeposit(bytes[],bytes[],bytes[],bytes32[])\":{\"notice\":\"Submit index-matching arrays that form Phase 0 DepositData objects.         Will create a deposit transaction per index of the arrays submitted. \"},\"constructor\":\"Empty constructor.\"},\"notice\":\"Batch ETH2 deposits, uses the official Deposit contract from the ETH          Foundation for each atomic deposit. This contract acts as a for loop.          Each deposit size will be an optimal 32 ETH. \"}},\"settings\":{\"compilationTarget\":{\"contracts/BatchDeposit.sol\":\"BatchDeposit\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BatchDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.11;\\npragma experimental ABIEncoderV2;\\n\\n// external dependencies\\nimport './openzeppelin/utils/Address.sol';\\nimport './openzeppelin/math/SafeMath.sol';\\n\\nimport './IDeposit.sol';\\n\\n/// @notice  Batch ETH2 deposits, uses the official Deposit contract from the ETH\\n///          Foundation for each atomic deposit. This contract acts as a for loop.\\n///          Each deposit size will be an optimal 32 ETH.\\n///\\n/// @dev     The batch size has an upper bound due to the block gas limit. Each atomic\\n///          deposit costs ~62,000 gas. The current block gas-limit is ~12,400,000 gas.\\n///\\n/// Author:  Staked Securely, Inc. (https://staked.us/)\\ncontract BatchDeposit {\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n\\n    /*************** STORAGE VARIABLE DECLARATIONS **************/\\n\\n    uint256 public constant DEPOSIT_AMOUNT = 32 ether;\\n    // currently points at the Zinken Deposit Contract\\n    // address public constant DEPOSIT_CONTRACT_ADDRESS = 0x5cA1e00004366Ac85f492887AAab12d0e6418876;    //mainnet\\n    address public constant DEPOSIT_CONTRACT_ADDRESS = 0x8A04d14125D0FDCDc742F4A05C051De07232EDa4;      //private\\n    IDeposit private constant DEPOSIT_CONTRACT = IDeposit(DEPOSIT_CONTRACT_ADDRESS);\\n\\n    /*************** EVENT DECLARATIONS **************/\\n\\n    /// @notice  Signals a refund of sent-in Ether that was extra and not required.\\n    ///\\n    /// @dev     The refund is sent to the msg.sender.\\n    ///\\n    /// @param  to - The ETH address receiving the ETH.\\n    /// @param  amount - The amount of ETH being refunded.\\n    event LogSendDepositLeftover(address to, uint256 amount);\\n\\n    /////////////////////// FUNCTION DECLARATIONS BEGIN ///////////////////////\\n\\n    /********************* PUBLIC FUNCTIONS **********************/\\n\\n    /// @notice  Empty constructor.\\n    constructor() public {}\\n\\n    /// @notice  Fallback function.\\n    ///\\n    /// @dev     Used to address parties trying to send in Ether with a helpful\\n    ///          error message.\\n    function() external payable {\\n        revert('#BatchDeposit fallback(): Use the `batchDeposit(...)` function to send Ether to this contract.');\\n    }\\n\\n    /// @notice Submit index-matching arrays that form Phase 0 DepositData objects.\\n    ///         Will create a deposit transaction per index of the arrays submitted.\\n    ///\\n    /// @param pubkeys - An array of BLS12-381 public keys.\\n    /// @param withdrawal_credentials - An array of commitment to public key for withdrawals.\\n    /// @param signatures - An array of BLS12-381 signatures.\\n    /// @param deposit_data_roots - An array of the SHA-256 hash of the SSZ-encoded DepositData object.\\n    function batchDeposit(\\n        bytes[] calldata pubkeys,\\n        bytes[] calldata withdrawal_credentials,\\n        bytes[] calldata signatures,\\n        bytes32[] calldata deposit_data_roots\\n    ) external payable {\\n        require(\\n            pubkeys.length == withdrawal_credentials.length &&\\n                pubkeys.length == signatures.length &&\\n                pubkeys.length == deposit_data_roots.length,\\n            \\\"#BatchDeposit batchDeposit(): All parameter array's must have the same length.\\\"\\n        );\\n        require(pubkeys.length > 0, \\\"#BatchDeposit batchDeposit(): All parameter array's must have a length greater than zero.\\\");\\n        require(\\n            msg.value >= DEPOSIT_AMOUNT.mul(pubkeys.length),\\n            '#BatchDeposit batchDeposit(): Ether deposited needs to be at least: 32 * (parameter `pubkeys[]` length).'\\n        );\\n        uint256 deposited = 0;\\n\\n        // Loop through DepositData arrays submitting deposits\\n        for (uint256 i = 0; i < pubkeys.length; i++) {\\n            DEPOSIT_CONTRACT.deposit.value(DEPOSIT_AMOUNT)(pubkeys[i], withdrawal_credentials[i], signatures[i], deposit_data_roots[i]);\\n            deposited = deposited.add(DEPOSIT_AMOUNT);\\n        }\\n        assert(deposited == DEPOSIT_AMOUNT.mul(pubkeys.length));\\n        uint256 ethToReturn = msg.value.sub(deposited);\\n        if (ethToReturn > 0) {\\n            // Emit `LogSendDepositLeftover` log\\n            emit LogSendDepositLeftover(msg.sender, ethToReturn);\\n\\n            // This function doesn't guard against re-entrancy, and we're calling an\\n            // untrusted address, but in this situation there is no state, etc. to\\n            // take advantage of, so re-entrancy guard is unneccesary gas cost.\\n            // This function uses call.value(), and handles return values/failures by\\n            // reverting the transaction.\\n            (msg.sender).sendValue(ethToReturn);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b30aaafd370125de5e933ceb90564603ebf6ce516124cae4d819ec893d04e41\"},\"contracts/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.11;\\n\\n/// @notice  Interface of the official Deposit contract from the ETH\\n///          Foundation.\\ninterface IDeposit {\\n    /// @notice Submit a Phase 0 DepositData object.\\n    ///\\n    /// @param pubkey - A BLS12-381 public key.\\n    /// @param withdrawal_credentials - Commitment to a public key for withdrawals.\\n    /// @param signature - A BLS12-381 signature.\\n    /// @param deposit_data_root - The SHA-256 hash of the SSZ-encoded DepositData object.\\n    ///                            Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x21e356fbb8ba22b29807836d4783a1767ce038f4e7533afd967b7a7f755b1361\"},\"contracts/openzeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.11;\\n\\n/// npm package/version - @openzeppelin/contracts-ethereum-package: 2.5.0\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4038ea1723bfff662da9f74d717c9bbc817114242c8a06c64ac907f46a65c\"},\"contracts/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.11;\\n\\n/// npm package/version - @openzeppelin/contracts-ethereum-package: 2.5.0\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n}\\n\",\"keccak256\":\"0x4e3ddf543dac0f412b9f46acc112d80c845a483bcbd181c9b1f7fc7bf2db3e97\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610bf3806100206000396000f3fe6080604052600436106100345760003560e01c8063a524679e14610055578063ca0bfcce14610080578063ec6925a714610095575b60405162461bcd60e51b815260040161004c90610a9f565b60405180910390fd5b34801561006157600080fd5b5061006a6100b7565b6040516100779190610a0e565b60405180910390f35b61009361008e36600461057f565b6100cf565b005b3480156100a157600080fd5b506100aa6103ac565b6040516100779190610b1f565b738a04d14125d0fdcdc742f4a05c051de07232eda481565b86851480156100dd57508683145b80156100e857508681145b6101045760405162461bcd60e51b815260040161004c90610abf565b866101215760405162461bcd60e51b815260040161004c90610b0f565b61013a6801bc16d674ec8000008863ffffffff6103b916565b3410156101595760405162461bcd60e51b815260040161004c90610aff565b6000805b8881101561031b57738a04d14125d0fdcdc742f4a05c051de07232eda463228951186801bc16d674ec8000008c8c8581811061019557fe5b602002820190508035601e19368490030181126101b157600080fd5b9091016020810191503567ffffffffffffffff8111156101d057600080fd5b368190038213156101e057600080fd5b8c8c878181106101ec57fe5b602002820190508035601e193684900301811261020857600080fd5b9091016020810191503567ffffffffffffffff81111561022757600080fd5b3681900382131561023757600080fd5b8c8c8981811061024357fe5b602002820190508035601e193684900301811261025f57600080fd5b9091016020810191503567ffffffffffffffff81111561027e57600080fd5b3681900382131561028e57600080fd5b8c8c8b81811061029a57fe5b905060200201356040518963ffffffff1660e01b81526004016102c39796959493929190610a37565b6000604051808303818588803b1580156102dc57600080fd5b505af11580156102f0573d6000803e3d6000fd5b50505050506103116801bc16d674ec800000836103fc90919063ffffffff16565b915060010161015d565b506103356801bc16d674ec8000008963ffffffff6103b916565b811461033d57fe5b600061034f348363ffffffff61042116565b905080156103a0577f5bf796d990a3e234f75e4f1e307ccc21ddd796f87f41563e8320696505ee268a3382604051610388929190610a1c565b60405180910390a16103a0338263ffffffff61046316565b50505050505050505050565b6801bc16d674ec80000081565b6000826103c8575060006103f6565b828202828482816103d557fe5b04146103f35760405162461bcd60e51b815260040161004c90610aef565b90505b92915050565b6000828201838110156103f35760405162461bcd60e51b815260040161004c90610aaf565b60006103f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610505565b30318111156104845760405162461bcd60e51b815260040161004c90610adf565b6000826001600160a01b03168260405161049d90610a03565b60006040518083038185875af1925050503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b50509050806105005760405162461bcd60e51b815260040161004c90610acf565b505050565b600081848411156105295760405162461bcd60e51b815260040161004c9190610a8e565b50508183035b9392505050565b60008083601f84011261054857600080fd5b50813567ffffffffffffffff81111561056057600080fd5b60208301915083602082028301111561057857600080fd5b9250929050565b6000806000806000806000806080898b03121561059b57600080fd5b883567ffffffffffffffff8111156105b257600080fd5b6105be8b828c01610536565b9850985050602089013567ffffffffffffffff8111156105dd57600080fd5b6105e98b828c01610536565b9650965050604089013567ffffffffffffffff81111561060857600080fd5b6106148b828c01610536565b9450945050606089013567ffffffffffffffff81111561063357600080fd5b61063f8b828c01610536565b92509250509295985092959890939650565b61065a81610b59565b82525050565b61065a81610b3f565b61065a81610b4a565b600061067e8385610b31565b935061068b838584610b6a565b61069483610ba6565b9093019392505050565b60006106a982610b2d565b6106b38185610b31565b93506106c3818560208601610b76565b61069481610ba6565b60006106d9605e83610b31565b7f2342617463684465706f7369742066616c6c6261636b28293a2055736520746881527f65206062617463684465706f736974282e2e2e29602066756e6374696f6e207460208201527f6f2073656e6420457468657220746f207468697320636f6e74726163742e0000604082015260600192915050565b600061075e601b83610b31565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000610797604e83610b31565b7f2342617463684465706f7369742062617463684465706f73697428293a20416c81527f6c20706172616d657465722061727261792773206d757374206861766520746860208201526d329039b0b6b2903632b733ba341760911b604082015260600192915050565b600061080d603a83610b31565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b600061086c601d83610b31565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b60006108a5602183610b31565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006103f6600083610b3a565b60006108f5606883610b31565b7f2342617463684465706f7369742062617463684465706f73697428293a20457481527f686572206465706f7369746564206e6565647320746f206265206174206c656160208201527f73743a203332202a2028706172616d6574657220607075626b6579735b5d60206040820152673632b733ba34149760c11b606082015260800192915050565b600061098b605983610b31565b7f2342617463684465706f7369742062617463684465706f73697428293a20416c81527f6c20706172616d657465722061727261792773206d757374206861766520612060208201527f6c656e6774682067726561746572207468616e207a65726f2e00000000000000604082015260600192915050565b60006103f6826108db565b602081016103f68284610660565b60408101610a2a8285610651565b61052f6020830184610669565b60808082528101610a4981898b610672565b90508181036020830152610a5e818789610672565b90508181036040830152610a73818587610672565b9050610a826060830184610669565b98975050505050505050565b602080825281016103f3818461069e565b602080825281016103f6816106cc565b602080825281016103f681610751565b602080825281016103f68161078a565b602080825281016103f681610800565b602080825281016103f68161085f565b602080825281016103f681610898565b602080825281016103f6816108e8565b602080825281016103f68161097e565b602081016103f68284610669565b5190565b90815260200190565b919050565b60006103f682610b4d565b90565b6001600160a01b031690565b60006103f68260006103f682610b3f565b82818337506000910152565b60005b83811015610b91578181015183820152602001610b79565b83811115610ba0576000848401525b50505050565b601f01601f19169056fea365627a7a723158208835e51a0e1e580d928bc0aa0232fe3ca08c2746bd80f3feb2faa8d200a0c20e6c6578706572696d656e74616cf564736f6c634300050b0040",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063a524679e14610055578063ca0bfcce14610080578063ec6925a714610095575b60405162461bcd60e51b815260040161004c90610a9f565b60405180910390fd5b34801561006157600080fd5b5061006a6100b7565b6040516100779190610a0e565b60405180910390f35b61009361008e36600461057f565b6100cf565b005b3480156100a157600080fd5b506100aa6103ac565b6040516100779190610b1f565b738a04d14125d0fdcdc742f4a05c051de07232eda481565b86851480156100dd57508683145b80156100e857508681145b6101045760405162461bcd60e51b815260040161004c90610abf565b866101215760405162461bcd60e51b815260040161004c90610b0f565b61013a6801bc16d674ec8000008863ffffffff6103b916565b3410156101595760405162461bcd60e51b815260040161004c90610aff565b6000805b8881101561031b57738a04d14125d0fdcdc742f4a05c051de07232eda463228951186801bc16d674ec8000008c8c8581811061019557fe5b602002820190508035601e19368490030181126101b157600080fd5b9091016020810191503567ffffffffffffffff8111156101d057600080fd5b368190038213156101e057600080fd5b8c8c878181106101ec57fe5b602002820190508035601e193684900301811261020857600080fd5b9091016020810191503567ffffffffffffffff81111561022757600080fd5b3681900382131561023757600080fd5b8c8c8981811061024357fe5b602002820190508035601e193684900301811261025f57600080fd5b9091016020810191503567ffffffffffffffff81111561027e57600080fd5b3681900382131561028e57600080fd5b8c8c8b81811061029a57fe5b905060200201356040518963ffffffff1660e01b81526004016102c39796959493929190610a37565b6000604051808303818588803b1580156102dc57600080fd5b505af11580156102f0573d6000803e3d6000fd5b50505050506103116801bc16d674ec800000836103fc90919063ffffffff16565b915060010161015d565b506103356801bc16d674ec8000008963ffffffff6103b916565b811461033d57fe5b600061034f348363ffffffff61042116565b905080156103a0577f5bf796d990a3e234f75e4f1e307ccc21ddd796f87f41563e8320696505ee268a3382604051610388929190610a1c565b60405180910390a16103a0338263ffffffff61046316565b50505050505050505050565b6801bc16d674ec80000081565b6000826103c8575060006103f6565b828202828482816103d557fe5b04146103f35760405162461bcd60e51b815260040161004c90610aef565b90505b92915050565b6000828201838110156103f35760405162461bcd60e51b815260040161004c90610aaf565b60006103f383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610505565b30318111156104845760405162461bcd60e51b815260040161004c90610adf565b6000826001600160a01b03168260405161049d90610a03565b60006040518083038185875af1925050503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b50509050806105005760405162461bcd60e51b815260040161004c90610acf565b505050565b600081848411156105295760405162461bcd60e51b815260040161004c9190610a8e565b50508183035b9392505050565b60008083601f84011261054857600080fd5b50813567ffffffffffffffff81111561056057600080fd5b60208301915083602082028301111561057857600080fd5b9250929050565b6000806000806000806000806080898b03121561059b57600080fd5b883567ffffffffffffffff8111156105b257600080fd5b6105be8b828c01610536565b9850985050602089013567ffffffffffffffff8111156105dd57600080fd5b6105e98b828c01610536565b9650965050604089013567ffffffffffffffff81111561060857600080fd5b6106148b828c01610536565b9450945050606089013567ffffffffffffffff81111561063357600080fd5b61063f8b828c01610536565b92509250509295985092959890939650565b61065a81610b59565b82525050565b61065a81610b3f565b61065a81610b4a565b600061067e8385610b31565b935061068b838584610b6a565b61069483610ba6565b9093019392505050565b60006106a982610b2d565b6106b38185610b31565b93506106c3818560208601610b76565b61069481610ba6565b60006106d9605e83610b31565b7f2342617463684465706f7369742066616c6c6261636b28293a2055736520746881527f65206062617463684465706f736974282e2e2e29602066756e6374696f6e207460208201527f6f2073656e6420457468657220746f207468697320636f6e74726163742e0000604082015260600192915050565b600061075e601b83610b31565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000610797604e83610b31565b7f2342617463684465706f7369742062617463684465706f73697428293a20416c81527f6c20706172616d657465722061727261792773206d757374206861766520746860208201526d329039b0b6b2903632b733ba341760911b604082015260600192915050565b600061080d603a83610b31565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207281527f6563697069656e74206d61792068617665207265766572746564000000000000602082015260400192915050565b600061086c601d83610b31565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000815260200192915050565b60006108a5602183610b31565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006103f6600083610b3a565b60006108f5606883610b31565b7f2342617463684465706f7369742062617463684465706f73697428293a20457481527f686572206465706f7369746564206e6565647320746f206265206174206c656160208201527f73743a203332202a2028706172616d6574657220607075626b6579735b5d60206040820152673632b733ba34149760c11b606082015260800192915050565b600061098b605983610b31565b7f2342617463684465706f7369742062617463684465706f73697428293a20416c81527f6c20706172616d657465722061727261792773206d757374206861766520612060208201527f6c656e6774682067726561746572207468616e207a65726f2e00000000000000604082015260600192915050565b60006103f6826108db565b602081016103f68284610660565b60408101610a2a8285610651565b61052f6020830184610669565b60808082528101610a4981898b610672565b90508181036020830152610a5e818789610672565b90508181036040830152610a73818587610672565b9050610a826060830184610669565b98975050505050505050565b602080825281016103f3818461069e565b602080825281016103f6816106cc565b602080825281016103f681610751565b602080825281016103f68161078a565b602080825281016103f681610800565b602080825281016103f68161085f565b602080825281016103f681610898565b602080825281016103f6816108e8565b602080825281016103f68161097e565b602081016103f68284610669565b5190565b90815260200190565b919050565b60006103f682610b4d565b90565b6001600160a01b031690565b60006103f68260006103f682610b3f565b82818337506000910152565b60005b83811015610b91578181015183820152602001610b79565b83811115610ba0576000848401525b50505050565b601f01601f19169056fea365627a7a723158208835e51a0e1e580d928bc0aa0232fe3ca08c2746bd80f3feb2faa8d200a0c20e6c6578706572696d656e74616cf564736f6c634300050b0040",
  "devdoc": {
    "details": "The batch size has an upper bound due to the block gas limit. Each atomic          deposit costs ~62,000 gas. The current block gas-limit is ~12,400,000 gas.  /// Author:  Staked Securely, Inc. (https://staked.us/)",
    "methods": {
      "batchDeposit(bytes[],bytes[],bytes[],bytes32[])": {
        "params": {
          "deposit_data_roots": "- An array of the SHA-256 hash of the SSZ-encoded DepositData object.",
          "pubkeys": "- An array of BLS12-381 public keys.",
          "signatures": "- An array of BLS12-381 signatures.",
          "withdrawal_credentials": "- An array of commitment to public key for withdrawals."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "batchDeposit(bytes[],bytes[],bytes[],bytes32[])": {
        "notice": "Submit index-matching arrays that form Phase 0 DepositData objects.         Will create a deposit transaction per index of the arrays submitted. "
      },
      "constructor": "Empty constructor."
    },
    "notice": "Batch ETH2 deposits, uses the official Deposit contract from the ETH          Foundation for each atomic deposit. This contract acts as a for loop.          Each deposit size will be an optimal 32 ETH. "
  }
}